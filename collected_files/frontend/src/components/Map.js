// Map.js
import React, { useEffect, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import '../styles/Map.css';

const Map = () => {
    const [locations, setLocations] = useState([]);
    const [map, setMap] = useState(null);

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö
    useEffect(() => {
        async function loadLocations() {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö —Å API...');
            const apiUrl = 'https://ecomaner.com/api/map/locations/';

            try {
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                });

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
                }

                const data = await response.json();
                console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç API:', data);

                if (Array.isArray(data)) {
                    console.log(`–ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ –∏–∑ ${data.length} –ª–æ–∫–∞—Ü–∏–π.`);
                    data.forEach((location, index) => {
                        console.log(`–õ–æ–∫–∞—Ü–∏—è ${index + 1}: —à–∏—Ä–æ—Ç–∞ ${location.latitude}, –¥–æ–ª–≥–æ—Ç–∞ ${location.longitude}`);
                    });
                    setLocations(data);
                } else {
                    console.error("–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API, –Ω–æ –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç:", data);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö:', error);
            }
        }

        loadLocations();
    }, []);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    useEffect(() => {
        if (!map) {
            const newMap = L.map('map').setView([50.27, 30.31], 10);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '¬© OpenStreetMap'
            }).addTo(newMap);

            console.log("–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞");
            setMap(newMap);
        }
    }, [map]);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
    useEffect(() => {
        if (map && locations.length > 0) {
            console.log("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É...");
            locations.forEach((location, index) => {
                const lat = parseFloat(location.latitude);
                const lng = parseFloat(location.longitude);

                if (!isNaN(lat) && !isNaN(lng)) {
                    console.log(`–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}: —à–∏—Ä–æ—Ç–∞ ${lat}, –¥–æ–ª–≥–æ—Ç–∞ ${lng}`);
                    
                    const popupContent = `
                        <div>
                            <b>${location.type || '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω'}</b><br>
                            ${location.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                            <div style="margin-top: 8px;">
                                <button onclick="window.handleVote('${location.id}', 'like')">üëç –õ–∞–π–∫</button>
                                <button onclick="window.handleVote('${location.id}', 'dislike')">üëé –î–∏–∑–ª–∞–π–∫</button>
                            </div>
                            <textarea id="comment_${location.id}" placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"></textarea>
                            <button onclick="window.handleComment('${location.id}')">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</button>
                        </div>
                    `;

                    const marker = L.marker([lat, lng])
                        .addTo(map)
                        .bindPopup(popupContent);

                    marker.on('click', () => {
                        console.log(`–ú–∞—Ä–∫–µ—Ä –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ —Å ID ${location.id} –Ω–∞–∂–∞—Ç`);
                    });
                } else {
                    console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}:`, location);
                }
            });
        }
    }, [map, locations]);

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    window.handleVote = (locationId, type) => {
        console.log(`–ì–æ–ª–æ—Å: ${type} –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ —Å ID ${locationId}`);
        // –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    };

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    window.handleComment = (locationId) => {
        const comment = document.getElementById(`comment_${locationId}`).value;
        if (comment) {
            console.log(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ —Å ID ${locationId}: ${comment}`);
            // –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        } else {
            alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        }
    };

    return <div id="map" style={{ height: '600px', width: '100%' }} />;
};

export default Map;
