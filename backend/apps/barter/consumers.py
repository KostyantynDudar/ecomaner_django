import json
from channels.generic.websocket import AsyncWebsocketConsumer
from asgiref.sync import sync_to_async
from apps.barter.models import BarterDeal as Deal


class TradeConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope["url_route"]["kwargs"]["deal_id"]
        self.room_group_name = f"deal_{self.room_name}"

        await self.channel_layer.group_add(self.room_group_name, self.channel_name)
        await self.accept()

        print(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.room_name}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.fetch_current_state()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)
        print(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {self.room_name}")

    async def receive(self, text_data):
        data = json.loads(text_data)
        print(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data}")

        if data["action"] == "update_price":
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    "type": "deal_update",
                    "offerA": data["offerA"],
                    "offerB": data["offerB"],
                    "priceDifference": data["priceDifference"],
                }
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            await self.update_database(data)

    async def deal_update(self, event):
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ {self.room_name}: {event}")

        await self.send(text_data=json.dumps({
            "type": "update",
            "offerA": event["offerA"],
            "offerB": event["offerB"],
            "priceDifference": event["priceDifference"],
        }))

    async def fetch_current_state(self):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        deal = await self.get_deal_state()
        if deal:
            await self.send(text_data=json.dumps({
                "type": "update",
                "offerA": deal["offerA"],
                "offerB": deal["offerB"],
                "priceDifference": deal["priceDifference"],
            }))

    @sync_to_async
    def get_deal_state(self):
        """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö """
        try:
            deal = Deal.objects.get(id=self.room_name)
            return {
                "offerA": float(deal.item_A.estimated_value) if deal.item_A else 0,
                "offerB": float(deal.item_B.estimated_value) if deal.item_B else 0,
                "priceDifference": abs(
    float(deal.item_A.estimated_value) if deal.item_A else 0 -
    float(deal.item_B.estimated_value) if deal.item_B else 0
),

            }
        except Deal.DoesNotExist:
            return None

    @sync_to_async
    def update_database(self, data):
        """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö """
        try:
            deal = Deal.objects.get(id=self.room_name)
            if deal.item_A:
                deal.item_A.estimated_value = data["offerA"]
                deal.item_A.save()
            if deal.item_B:
                deal.item_B.estimated_value = data["offerB"]
                deal.item_B.save()
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î: {data['offerA']} ‚Üî {data['offerB']}")
        except Deal.DoesNotExist:
            print(f"‚ùå –û—à–∏–±–∫–∞: –°–¥–µ–ª–∫–∞ {self.room_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
