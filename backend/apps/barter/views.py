from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from rest_framework import generics, permissions, status, serializers
from rest_framework.response import Response
from rest_framework.throttling import UserRateThrottle
from .models import BarterRequest, BarterDeal, UserBalance
from .serializers import BarterRequestSerializer, BarterDealSerializer
from .permissions import IsOwnerOrReadOnly
import logging

logger = logging.getLogger(__name__)

# üîπ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
def barter_public(request):
    """–ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–∞—Ä—Ç–µ—Ä–∞."""
    return render(request, 'barter/public.html')

@login_required
def barter_dashboard(request):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –±–∞—Ä—Ç–µ—Ä–∞."""
    return render(request, 'barter/dashboard.html')

@login_required
def barter_requests(request):
    """–¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–∞—Ä—Ç–µ—Ä."""
    return render(request, 'barter/requests.html')

# üîπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (anti-spam)
class BarterRequestThrottle(UserRateThrottle):
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    rate = '1000/day'  # –ú–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

# üîπ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserBarterRequestsAPIView(generics.ListCreateAPIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    serializer_class = BarterRequestSerializer
    permission_classes = [permissions.IsAuthenticated]
    throttle_classes = [BarterRequestThrottle]

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return BarterRequest.objects.filter(owner=self.request.user)

    def perform_create(self, serializer):
        """–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        logger.debug(f"üìå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {self.request.data}")  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        serializer.save(
            owner=self.request.user,
            location=self.request.data.get('address', ''),  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            estimated_value=self.request.data.get('value', 0)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        )

# üîπ API –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class UserBarterRequestDetailAPIView(generics.RetrieveUpdateDestroyAPIView):
    """API –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    serializer_class = BarterRequestSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrReadOnly]

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return BarterRequest.objects.filter(owner=self.request.user)

# üîπ API –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserBarterDealsAPIView(generics.ListAPIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    serializer_class = BarterRequestSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ–≥–æ –æ–±–º–µ–Ω—ã"""
        return BarterRequest.objects.filter(owner=self.request.user)

# üîπ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º)
class AllBarterRequestsAPIView(generics.ListAPIView):
    """API –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –±–∞—Ä—Ç–µ—Ä"""
    serializer_class = BarterRequestSerializer
    permission_classes = [permissions.AllowAny]

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –±–∞—Ä—Ç–µ—Ä"""
        return BarterRequest.objects.all()

# üîπ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
class CreateDealAPIView(generics.CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    serializer_class = BarterDealSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        try:
            item_A_id = self.request.data.get("item_A")
            item_B_id = self.request.data.get("item_B")

            logger.info(f"üìå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: item_A={item_A_id}, item_B={item_B_id}")

            if not item_A_id or not str(item_A_id).isdigit():
                raise serializers.ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π item_A")

            item_A = get_object_or_404(BarterRequest, id=int(item_A_id))

            item_B = None
            if item_B_id:
                if not str(item_B_id).isdigit():
                    raise serializers.ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π item_B")
                item_B = get_object_or_404(BarterRequest, id=int(item_B_id))

            compensation = float(self.request.data.get("compensation_points", 0))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
            initiator_balance, _ = UserBalance.objects.get_or_create(user=self.request.user)
            if compensation > initiator_balance.balance:
                raise serializers.ValidationError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏!")

            serializer.save(initiator=self.request.user, item_A=item_A, item_B=item_B)

        except ValueError:
            raise serializers.ValidationError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏")



# üîπ API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
class ConfirmDealAPIView(generics.UpdateAPIView):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π"""
    queryset = BarterDeal.objects.all()
    serializer_class = BarterDealSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_update(self, serializer):
        instance = serializer.instance

        if instance.partner is not None:
            raise serializers.ValidationError("–°–¥–µ–ª–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

        if instance.status != 'pending':
            raise serializers.ValidationError("–°–¥–µ–ª–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        if instance.initiator == self.request.user:
            raise serializers.ValidationError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é –∂–µ —Å–¥–µ–ª–∫—É.")

        instance.partner = self.request.user
        instance.status = 'active'

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –±–∞–ª–ª–æ–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if instance.compensation_points > 0:
            initiator_balance = get_object_or_404(UserBalance, user=instance.initiator)
            partner_balance = get_object_or_404(UserBalance, user=self.request.user)

            try:
                initiator_balance.remove_points(instance.compensation_points)
                partner_balance.add_points(instance.compensation_points)
            except ValueError:
                raise serializers.ValidationError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Å–¥–µ–ª–∫–∏.")

        instance.save()
        logger.info(f"–°–¥–µ–ª–∫–∞ {instance.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {self.request.user.username}")

# üîπ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserDealsAPIView(generics.ListAPIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    serializer_class = BarterDealSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return BarterDeal.objects.filter(initiator=self.request.user) | BarterDeal.objects.filter(partner=self.request.user)
