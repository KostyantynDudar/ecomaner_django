import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import Cookies from "js-cookie";  // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: npm install js-cookie

    const TradePanel = ({ dealId, itemA, itemB, setItemA, setItemB, userBalance, userEmail, ownerAEmail, ownerBEmail }) => {

    const [offerA, setOfferA] = useState(itemA?.estimated_value || 0);
    const [offerB, setOfferB] = useState(itemB?.estimated_value || 0);
    const [priceDifference, setPriceDifference] = useState(0);
    const [canAccept, setCanAccept] = useState(false);
    const socketRef = useRef(null);
    const [dealStatus, setDealStatus] = useState(null);

    console.log("üî• TradePanel –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—Å—ã:", { dealId, itemA, itemB, userEmail, ownerAEmail, ownerBEmail });


    // ‚úÖ –§–∏–∫—Å: —Å–ª–µ–¥–∏–º –∑–∞ itemA –∏ itemB
    useEffect(() => {
        if (itemA) setOfferA(itemA.estimated_value);
        if (itemB) setOfferB(itemB.estimated_value);
    }, [itemA, itemB]);



useEffect(() => {
    if (!dealId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: dealId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω! WebSocket –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
        return;
    }

    const connectWebSocket = () => {
        console.log("üü° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket...");
        socketRef.current = new WebSocket(`wss://ecomaner.com/ws/barter/deal/${dealId}/`);

        socketRef.current.onopen = () => console.log("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");

        socketRef.current.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ WebSocket:", data);

            if (data.type === "update") {
                setOfferA(parseFloat(data.offerA));
                setOfferB(parseFloat(data.offerB));
                setPriceDifference(parseFloat(data.priceDifference));

                // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º itemA –∏ itemB, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—Ä–∞–∑–∏–ª–∏—Å—å –≤ DealRoom
                setItemA(prev => prev ? { ...prev, estimated_value: parseFloat(data.offerA) } : prev);
                setItemB(prev => prev ? { ...prev, estimated_value: parseFloat(data.offerB) } : prev);
            }
        };

        socketRef.current.onclose = () => {
            console.log("‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫...");
            setTimeout(() => {
                if (!socketRef.current || socketRef.current.readyState === WebSocket.CLOSED) {
                    connectWebSocket();
                }
            }, 3000);
        };
    };

    connectWebSocket(); // –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket

    return () => {
        if (socketRef.current) {
            console.log("üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.");
            socketRef.current.close();
        }
    };
}, [dealId]);



useEffect(() => {
    window.reactState = { offerA, offerB, priceDifference, canAccept }; 
    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–µ–π—Ç:", { offerA, offerB, priceDifference, canAccept });

    const diff = parseFloat(Math.abs(offerA - offerB).toFixed(2));
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã
    setPriceDifference(diff);

    const newCanAccept = offerA === offerB && offerA > 0;

    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ canAccept:", { offerA, offerB, priceDifference: diff, newCanAccept });

    // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ `canAccept`
    setTimeout(() => setCanAccept(newCanAccept), 0);
}, [offerA, offerB]);




    const sendUpdate = (newOfferA, newOfferB) => {
        if (!socketRef.current || socketRef.current.readyState !== WebSocket.OPEN) {
            console.error("‚ùå WebSocket –Ω–µ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", socketRef.current?.readyState);
            return;
        }
        socketRef.current.send(JSON.stringify({
            action: "update_price",
            offerA: newOfferA,
            offerB: newOfferB,
            priceDifference: Math.abs(newOfferA - newOfferB),
        }));
    };


const handleIncrease = () => {
    console.log("üîº –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã: userEmail =", userEmail, "ownerAEmail =", ownerAEmail, "ownerBEmail =", ownerBEmail);
    
    if (userEmail === ownerAEmail) {
        setOfferA((prev) => {
            console.log("üîº handleIncrease -> –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerA (–¥–æ):", prev);
            const prevValue = Number(prev) || 0;
            const newValue = Number((prevValue + 10).toFixed(2));
            console.log("‚úÖ handleIncrease -> –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerA:", newValue);
            sendUpdate(newValue, offerB);
            return newValue;
        });
    } else if (userEmail === ownerBEmail) {
        setOfferB((prev) => {
            console.log("üîº handleIncrease -> –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerB (–¥–æ):", prev);
            const prevValue = Number(prev) || 0;
            const newValue = Number((prevValue + 10).toFixed(2));
            console.log("‚úÖ handleIncrease -> –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerB:", newValue);
            sendUpdate(offerA, newValue);
            return newValue;
        });
    }
};


const handleDecrease = () => {
    console.log("üîΩ –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã: userEmail =", userEmail, "ownerAEmail =", ownerAEmail, "ownerBEmail =", ownerBEmail);

    if (userEmail === ownerAEmail) {
        setOfferA((prev) => {
            console.log("üîΩ handleDecrease -> –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerA (–¥–æ):", prev);
            const prevValue = Number(prev) || 0;
            const newValue = Math.max(0, Number((prevValue - 10).toFixed(2))); // üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 0
            console.log("‚úÖ handleDecrease -> –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerA:", newValue);
            sendUpdate(newValue, offerB);
            return newValue;
        });
    } else if (userEmail === ownerBEmail) {
        setOfferB((prev) => {
            console.log("üîΩ handleDecrease -> –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerB (–¥–æ):", prev);
            const prevValue = Number(prev) || 0;
            const newValue = Math.max(0, Number((prevValue - 10).toFixed(2))); // üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 0
            console.log("‚úÖ handleDecrease -> –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offerB:", newValue);
            sendUpdate(offerA, newValue);
            return newValue;
        });
    }
};






useEffect(() => {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    axios.get(`https://ecomaner.com/barter/api/deals/${dealId}/`, {
        headers: { "Authorization": `Token ${localStorage.getItem("authToken")}` }
    })
    .then(response => setDealStatus(response.data.status))
    .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏:", error));
}, [dealId]);

const handleAcceptDeal = async () => {
    try {
        const token = localStorage.getItem("authToken");
        const csrfToken = Cookies.get("csrftoken");

        const response = await axios.patch(`https://ecomaner.com/barter/api/deals/${dealId}/confirm/`, {}, {
            headers: { "Authorization": `Token ${token}`, "X-CSRFToken": csrfToken },
            withCredentials: true,
        });

        alert(response.data.message);
        setDealStatus("started"); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ UI
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–¥–µ–ª–∫–∏:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É.");
    }
};



const handleDirectInput = (e, offerType) => {
    const newValue = Math.max(0, Number(e.target.value)); // üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º–æ–º 0

    if (offerType === "A") {
        setOfferA(newValue);
        sendUpdate(newValue, offerB);
    } else {
        setOfferB(newValue);
        sendUpdate(offerA, newValue);
    }
};


console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π:", {
  priceDifference,
  userBalance,
  userEmail,
  ownerAEmail,
  ownerBEmail,
  offerA,
  offerB
});


return (
    <div className="trade-panel">
        <h3>–¢–æ—Ä–≥–∏</h3>
        <p>–†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: <strong>{priceDifference} –±–∞–ª–ª–æ–≤</strong></p>

        {dealStatus !== "started" && (
            <>
                <div>
                    <input
                        type="number"
                        value={userEmail === ownerAEmail ? offerA : offerB}
                        onChange={(e) => handleDirectInput(e, userEmail === ownerAEmail ? "A" : "B")}
                        min="0"
                        step="1"
                    />
                    <span> ‚Äî {userEmail === ownerAEmail ? offerB : offerA} –±–∞–ª–ª–æ–≤</span>
                </div>

                {priceDifference > 0 && userBalance >= priceDifference &&     
			((userEmail === itemA.owner && offerA < offerB) || 
     			(userEmail === itemB.owner && offerB < offerA)) && (
                    <button onClick={() => {
                        console.log("üí∞ –î–æ–ø–ª–∞—Ç–∞ –±–∞–ª–ª–æ–≤:", priceDifference);
                        setPriceDifference(0);
                        sendUpdate(offerA, offerB);
                    }}>
                        –î–æ–ø–ª–∞—Ç–∏—Ç—å {priceDifference} –±–∞–ª–ª–æ–≤
                    </button>
                )}
            </>
        )}

        {canAccept && dealStatus !== "started" && (
            <button onClick={handleAcceptDeal} className="accept-button">
                –ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É
            </button>
        )}
    </div>
);



};

export default TradePanel;
